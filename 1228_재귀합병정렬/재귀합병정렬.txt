순환 합병정렬
recursion tree 사용한다.
RLV, LRV 방식으로 트리 순회 가능

rmergeSort는 a[left:right]를 정렬
mid=(left+right)/2로 정한다음
listMerge를 리턴하는데 함수 인자로 rmergeSort(a, link, left, mid), rmergeSort(a, link, mid, right)를 재귀적으로 호출해 a리스트를 재귀적으로 계속 1/2 서브리스트로 나누다가 노드가 한개짜리인 리스트가 되면 rmergeSort를 벗어나 listMerge를 실행해 두 리스트를 정렬한 다음 이전의 rmergeSort로 돌아가 만약 right부분이 한개짜리 노드가 아니면 오른쪽으로 내려가며 (LRV)식으로 한개짜리 노드로 분해 한 다음(rmergeSort(a, link, mid, right)로 돌아가서 분해된다) 다시 합병, 합병된 리스트를 리턴하며 이전의 rmergeSort호출부로 돌아가는 식으로 실행된다.

*여기서 link는 정렬되는 리스트들의 인덱스를 저장하는 용도로 씀!!
연결리스트를 만들어서 링크를 연결하는게 아니고 그냥 링크(정수형 배열)에  a[i]를 출력하고나서 다음크기의 a의 원소를 찾기위한 인덱스를 link[i]에 들어가도록 한다.
a[i]를 출력하고나면 a[link[i]]를 출력한다.

listMerge는 리스트 두개의 시작인덱스인 start1과 start2를 함수 인자로 받아서 두 리스트를 합친다음 합친 리스트의 첫 인덱스를 리턴한다.
